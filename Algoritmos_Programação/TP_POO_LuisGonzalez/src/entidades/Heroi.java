package entidades;

import Enums.Personagem;
import itens.ArmaPrincipal;
import itens.Consumivel;
import itens.ConsumivelCombate;
import itens.Pocao;
import jogo.Historia;
import jogo.Tools;

import java.util.ArrayList;

/**
 * Classe abstrata que representa um her√≥i no jogo. Cont√©m atributos e comportamentos
 */
public abstract class Heroi extends Entidade {
    private int nivel;
    private int ouro;
    private ArmaPrincipal armaPrincipal;
    private ArrayList<Consumivel> inventario;
    private ArrayList<ConsumivelCombate> consuCombate;
    private ArrayList<Pocao> pocoes;
    private boolean ataqueEspecialUsado;

    /**
     * Construtor
     *
     * @param nome
     * @param hp
     * @param forca
     * @param nivel
     * @param ouro
     */
    public Heroi(Personagem nome, int hp, int forca, int nivel, int ouro) {
        super(nome, hp, forca);
        this.nivel = nivel;
        this.ouro = ouro;
        this.inventario = new ArrayList<>();
        this.ataqueEspecialUsado = false;
    }

    /**
     * Exibe os detalhes do her√≥i
     */
    @Override
    public void mostrarDetalhes() {

        super.mostrarDetalhes();

        System.out.printf(Tools.color.YELLOW + """
                             |   N√≠velüî∞: %s%s%s
                             |   Ouroü™ô:  %s%s%s
                             |   Arma‚öîÔ∏è:  %s%s%s
                             |   _________________________|_
                             \\_/___________________________/
                        
                        """ + Tools.color.RESET,
                Tools.color.WHITE_BRIGHT, this.nivel, Tools.color.YELLOW,
                Tools.color.WHITE_BRIGHT, this.ouro, Tools.color.YELLOW,
                Tools.color.WHITE_BRIGHT, (this.armaPrincipal != null ? this.armaPrincipal.getNome() : ""), Tools.color.YELLOW);
    }

    /**
     * M√©todo abstrato para o her√≥i atacar um NPC inimigo.
     *
     * @param npc
     * @return Retorna {@code true} se o NPC for derrotado, {@code false} caso contr√°rio.
     */
    public abstract boolean atacar(NPC npc);


    /**
     * M√©todo que permite ao her√≥i subir de n√≠vel. Se um NPC for derrotado, o ouro √© recebido e o n√≠vel, for√ßa, e vida aumentam.
     *
     * @param npc O NPC derrotado que fornece ouro ao her√≥i.
     */
    public void subirNivel(NPC npc) {
        // Adicionar ouro NPC -> her√≥i
        this.ouro += npc.getOuro();
        // Aumentar n√≠vel
        this.nivel += 1;
        // Aumentar for√ßa
        this.setForca(this.getForca() + 1);
        // Aumentar vida (HP)
        this.setMaxHp(this.getMaxHp() + 10);
        this.setHp(this.getHp() + 10);
        // Ativamos de novo o ataque especial
        this.ataqueEspecialUsado = false;
        // Mensagem
        System.out.println(Tools.color.YELLOW_BOLD_BRIGHT + this.getNome() + Tools.color.WHITE_BRIGHT + " ha subido de nivel");
    }

    /**
     * Sobrecarga do m√©todo de subir de n√≠vel, sem a necessidade de um NPC,
     */
    public void subirNivel() {
        // Aumentar n√≠vel
        this.nivel += 1;
        // Aumentar for√ßa
        this.setForca(this.getForca() + 1);
        // Aumentar vida (HP)
        this.setMaxHp(this.getMaxHp() + 10);
        this.setHp(this.getHp() + 10);
        // Mensagem
        System.out.println(Tools.color.YELLOW_BOLD_BRIGHT + this.getNome() + Tools.color.WHITE_BRIGHT + " ha subido de nivel");
    }

    /**
     * M√©todo para escolher o tipo de ataque (se for poss√≠vel) entre normal, especial ou consum√≠vel
     *
     * @return O valor do ataque escolhido, que ser√° somado √† for√ßa do her√≥i.
     */
    public int tipoAtaque() {
        int ataque, escolha, maxEscolha;
        do {
            System.out.print(Tools.color.WHITE_BRIGHT);
            // Se h√° consum√≠veis e arma
            if (!this.inventario.isEmpty() && this.armaPrincipal != null) {
                System.out.println("1- Ataque sem Arma" +
                        "\n2- Ataque com Arma" +
                        "\n3- Ataque Especial (uso √∫nico)" +
                        "\n4- Ataque Consum√≠vel" +
                        "\n5- Po√ß√µes");
                maxEscolha = 5;
                // Se s√≥ h√° consum√≠veis
            } else if (!this.inventario.isEmpty()) {
                System.out.println("1- Ataque sem Arma\n2- Ataque Consum√≠vel\n3- Po√ß√µes");
                maxEscolha = 3;
                // Se s√≥ tem arma
            } else if (this.armaPrincipal != null) {
                System.out.println("1- Ataque sem Arma\n2- Ataque com Arma\n3- Ataque Especial (uso √∫nico)");
                maxEscolha = 3;
            } else {
                // Se n√£o tem arma
                return this.getForca();
            }

            System.out.println();
            escolha = Tools.validarEscolhaNum(1, maxEscolha);
            System.out.println();

            ataque = switch (escolha) {
                case 2 -> (this.armaPrincipal != null) ? this.armaPrincipal.getAtaque() : usarConsumivelCombate();
                case 3 -> (this.armaPrincipal != null) ? ataqueEspecial() : usarPocao();
                case 4 -> usarConsumivelCombate();
                case 5 -> usarPocao();
                default -> 0;
            };

            // Entramos nesta valida√ß√£o se precisarmos de repetir o menu de ataque
            if (ataque == -1) {
                ataque = this.getForca();
                continue;
            }

            // Valida√ßao se foi ussada uma po√ß√£o que so da vida, retornamos for√ß√£ base
            if (ataque == 0) return this.getForca();

            if ((this.armaPrincipal == null && escolha == 2) || escolha == 4) return ataque;

            // Somamos a escolha + a for√ßa do her√≥i
            ataque += this.getForca();

        } while (ataque == this.getForca());

        return ataque;
    }

    /**
     * M√©todo para mudar o personagem do her√≥i durante o jogo.
     * O invent√°rio e outros atributos do her√≥i s√£o preservados, mas a arma principal e consum√≠veis s√£o atualizados.
     *
     * @param nome O nome do personagem para o qual o her√≥i ser√° alterado (Luffy, Zoro, ou Sanji).
     * @return O novo her√≥i com atributos preservados.
     */
    public Heroi mudarHeroi(Personagem nome) {

        // Criamos uma c√≥pia do ArrayList
        ArrayList<Consumivel> copiaInventario = new ArrayList<>(this.inventario);

        Heroi heroi = switch (nome) {
            case Personagem.Luffy ->
                    new Luffy(Personagem.Luffy, this.getHp(), this.getForca(), this.nivel, this.getOuro());
            case Personagem.Zoro ->
                    new Zoro(Personagem.Zoro, this.getHp(), this.getForca(), this.nivel, this.getOuro());
            case Personagem.Sanji ->
                    new Sanji(Personagem.Sanji, this.getHp(), this.getForca(), this.nivel, this.getOuro());
            default -> null;
        };
        heroi.setMaxHp(this.getMaxHp());

        heroi.inventario = this.inventario;

        if (nome == Personagem.Sanji) {
            if (this.armaPrincipal != null)
                heroi.armaPrincipal = new ArmaPrincipal("Diable Jambe Boots üî•", 10, 15, 80, Personagem.Sanji);

            for (Consumivel consumivel : copiaInventario) {
                if (consumivel instanceof ConsumivelCombate) {
                    heroi.inventario.remove(consumivel);
                    heroi.inventario.add(new ConsumivelCombate("Faca de Cozinha üî™", 5, Personagem.Sanji, 25));
                }
            }
        }

        if (nome == Personagem.Zoro) {
            if (this.armaPrincipal != null)
                heroi.armaPrincipal = new ArmaPrincipal("Espada Enma ‚öîÔ∏è", 10, 15, 90, Personagem.Zoro);

            for (Consumivel consumivel : copiaInventario) {
                if (consumivel instanceof ConsumivelCombate) {
                    heroi.inventario.remove(consumivel);
                    heroi.inventario.add(new ConsumivelCombate("Garrafa de Sake üç∂", 5, Personagem.Zoro, 25));
                }
            }
        }

        if (nome == Personagem.Luffy) {
            if (this.armaPrincipal != null)
                heroi.armaPrincipal = new ArmaPrincipal("Chap√©u de Palha üëí", 10, 15, 100, Personagem.Luffy);

            for (Consumivel consumivel : copiaInventario) {
                if (consumivel instanceof ConsumivelCombate) {
                    heroi.inventario.remove(consumivel);
                    heroi.inventario.add(new ConsumivelCombate("Peda√ßo do Mastro Principal ü™µ", 5, Personagem.Luffy,
                            25));
                }
            }
        }
        return heroi;
    }

    /**
     * M√©todo para preencher os consum√≠veis a usar pelo her√≥i
     * durante o fora da batalha
     */
    public void atualizarConsumiveis() {
        // ArrayList para adicionar os consum√≠veis tipo combate
        consuCombate = new ArrayList<>();
        // ArrayList para adicionar as po√ß√µes
        pocoes = new ArrayList<>();

        for (Consumivel consumivel : this.inventario) {

            if (consumivel instanceof ConsumivelCombate) {
                consuCombate.add((ConsumivelCombate) consumivel);
            }

            if (consumivel instanceof Pocao) {
                pocoes.add((Pocao) consumivel);
            }
        }
    }

    /**
     * M√©todo para o uso do consumivel tipo combate
     *
     * @return o valor do ataque selecionado / ou 0 se n√£o h√° consum√≠vel
     */
    public int usarConsumivelCombate() {
        atualizarConsumiveis();

        // Saimos se n√£o h√° po√ß√µes
        if (consuCombate.isEmpty()) {
            System.out.println(Tools.color.RED + "\nSem consum√≠veis de combate para usar!\n" + Tools.color.WHITE_BRIGHT);
            return -1;
        }

        System.out.println(Tools.color.YELLOW_BRIGHT + "\nConsum√≠veis de combate\n" + Tools.color.WHITE_BRIGHT);

        // Listamos po√ß√µes
        for (int i = 0; i < consuCombate.size(); i++) {
            System.out.println((i + 1) + "- " + consuCombate.get(i).getNome() + " | Ataque Instant√¢neo: " + consuCombate.get(i).getAtaqueInstantaneo());
        }

        System.out.println();
        int escolha = Tools.validarEscolhaNum(0, consuCombate.size());

        // Se escolher 0 para sair e voltar ao menu anterior
        if (escolha == 0) return -1;

        // Apagar o consum√≠vel do inventario principal
        this.inventario.remove(consuCombate.get(escolha - 1));

        // Print do uso da po√ß√£o
        Historia.combateConsumivelCombate(consuCombate.get(escolha - 1));

        return consuCombate.get(escolha - 1).getAtaqueInstantaneo();
    }

    /**
     * M√©todo listar e usar po√ß√µes dum her√≥i
     */
    public int usarPocao() {
        atualizarConsumiveis();

        // Saimos se n√£o h√° po√ß√µes
        if (pocoes.isEmpty()) {
            System.out.println(Tools.color.RED + "\nSem po√ß√µes para usar!\n" + Tools.color.WHITE_BRIGHT);
            return -1;
        }

        System.out.println(Tools.color.YELLOW_BRIGHT + "\nPo√ß√µes\n" + Tools.color.WHITE_BRIGHT);
        // Listamos po√ß√µes
        for (int i = 0; i < pocoes.size(); i++) {
            System.out.println((i + 1) + "- " + pocoes.get(i).getNome() + " | Vida a curar: " + pocoes.get(i).getVidaCurar() +
                    " | Aumento da For√ßa: " + pocoes.get(i).getAumentoForca());
        }

        System.out.println();
        int escolha = Tools.validarEscolhaNum(0, pocoes.size());

        // Se escolher 0 para sair e voltar ao menu anterior
        if (escolha == 0) return -1;

        // Cura da vida
        if (pocoes.get(escolha - 1).getVidaCurar() > 0) {
            if (!this.recebePocao(pocoes.get(escolha - 1).getVidaCurar())) {
                System.out.println(Tools.color.RED + "\nN√£o foi usada a Po√ß√£o!\n" + Tools.color.WHITE_BRIGHT);
            } else {
                // Print do uso da po√ß√£o
                Historia.combatePocao(pocoes.get(escolha - 1));

                // Apagar o consum√≠vel do inventario principal
                this.inventario.remove(pocoes.get(escolha - 1));

                // Aumento da for√ßa
                if (pocoes.get(escolha - 1).getAumentoForca() > 0)
                    return this.recebeForca(pocoes.get(escolha - 1).getAumentoForca());
            }
        }
        return 0;
    }

    /**
     * M√©todo que gerencia o ataque especial do her√≥i, se ele n√£o tiver sido usado.
     *
     * @return O valor do ataque especial, ou -1 se j√° foi usado.
     */
    public int ataqueEspecial() {
        if (!this.ataqueEspecialUsado) {
            this.ataqueEspecialUsado = true;
            return this.armaPrincipal.getAtaqueEspecial();
        } else {
            System.out.println(Tools.color.RED + "O ataque especial j√° foi usado" + Tools.color.WHITE_BRIGHT);
            return -1;
        }
    }


// ******************************** GETTERS / SETTERS ********************************

    /**
     * Getters
     */
    public int getNivel() {
        return nivel;
    }

    public int getOuro() {
        return this.ouro;
    }

    public ArmaPrincipal getArmaPrincipal() {
        return armaPrincipal;
    }

    public ArrayList<Consumivel> getInventario() {
        return inventario;
    }

    /**
     * Setters
     */
    public void setNivel(int nivel) {
        this.nivel = nivel;
    }

    public void setOuro(int ouro) {
        this.ouro += ouro;
    }

    public void setArmaPrincipal(ArmaPrincipal armaPrincipal) {
        this.armaPrincipal = armaPrincipal;
    }

    public void setInventario(Consumivel inventario) {
        this.inventario.add(inventario);
    }

    public void setAtaqueEspecialUsado(boolean ataqueEspecialUsado) {
        this.ataqueEspecialUsado = ataqueEspecialUsado;
    }
}
